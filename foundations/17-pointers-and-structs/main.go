package main

import "fmt"

/*
===============================================
PONTEIROS E STRUCTS EM GO
===============================================
Este exemplo demonstra a diferen√ßa fundamental entre:
- Passagem por valor (cria uma c√≥pia)
- Passagem por ponteiro (referencia o objeto original)
*/

// =============================================
// EXEMPLO 1: STRUCT SEM PONTEIRO (Por Valor)
// =============================================
// Quando um m√©todo recebe uma struct diretamente,
// Go faz uma C√ìPIA da struct original
type Cliente struct {
	nome string
}

// M√©todo que recebe Cliente por VALOR (sem *)
// Qualquer mudan√ßa aqui N√ÉO afeta a struct original
func (c Cliente) andou() {
	c.nome = "Outro nome" // Esta mudan√ßa s√≥ existe na C√ìPIA
	fmt.Printf("Dentro do m√©todo - cliente %v andou\n", c.nome)
}

// =============================================
// EXEMPLO 2: STRUCT COM PONTEIRO (Por Refer√™ncia)
// =============================================
// Para modificar a struct original, usamos PONTEIRO (*)
type Conta struct {
	saldo int
}

/*
M√âTODO COM PONTEIRO: func (c *Conta)
- O asterisco (*) indica que recebemos um PONTEIRO
- Isso significa que temos acesso √† struct ORIGINAL
- Mudan√ßas aqui AFETAM diretamente o objeto original
- Sintaxe: (c *Conta) = "c √© um ponteiro para Conta"
*/
func (c *Conta) simular(valor int) int {
	c.saldo += valor // Modifica a struct ORIGINAL
	fmt.Printf("Novo saldo: %d\n", c.saldo)
	return c.saldo
}

// =============================================
// EXEMPLO 3: FUN√á√ÉO CONSTRUTORA COM PONTEIRO
// =============================================
/*
FUN√á√ÉO CONSTRUTORA: NewConta() *Conta
- Retorna um PONTEIRO para uma nova inst√¢ncia de Conta
- O s√≠mbolo & cria um ponteiro para a struct
- Quando voc√™ usa esta fun√ß√£o, est√° trabalhando com o ORIGINAL
- N√£o h√° c√≥pia sendo feita, apenas uma refer√™ncia

Por que usar?
‚úÖ Economia de mem√≥ria (n√£o cria c√≥pias)
‚úÖ Modifica√ß√µes afetam diretamente o objeto
‚úÖ Padr√£o comum em Go para "construtores"
*/
func NewConta() *Conta {
	return &Conta{saldo: 0} // & = "endere√ßo de" (cria ponteiro)
}

func main() {
	fmt.Println("=== DEMONSTRA√á√ÉO DE PONTEIROS E STRUCTS ===")
	fmt.Println()

	// -----------------------------------------------
	// TESTE 1: Struct por VALOR (sem ponteiro)
	// -----------------------------------------------
	fmt.Println("üìù EXEMPLO 1 - Passagem por VALOR:")
	alexandre := Cliente{nome: "Alexandre"}
	fmt.Printf("Nome original: %s\n", alexandre.nome)

	alexandre.andou() // Chama m√©todo que recebe c√≥pia

	// ‚ö†Ô∏è  IMPORTANTE: O nome original N√ÉO foi alterado!
	fmt.Printf("Nome ap√≥s m√©todo: %s\n", alexandre.nome)
	fmt.Println("üëÜ Viu? O nome original n√£o mudou!")
	fmt.Println()

	// -----------------------------------------------
	// TESTE 2: Struct por PONTEIRO (com *)
	// -----------------------------------------------
	fmt.Println("üìù EXEMPLO 2 - Passagem por PONTEIRO:")
	conta := Conta{saldo: 1000}
	fmt.Printf("Saldo inicial: %d\n", conta.saldo)

	novoSaldo := conta.simular(500) // Chama m√©todo com ponteiro

	// ‚úÖ SUCESSO: O saldo original FOI alterado!
	fmt.Printf("Saldo retornado: %d\n", novoSaldo)
	fmt.Printf("Saldo da conta original: %d\n", conta.saldo)
	fmt.Println("üëÜ O saldo original foi modificado!")

	// -----------------------------------------------
	// TESTE 3: FUN√á√ÉO CONSTRUTORA COM PONTEIRO
	// -----------------------------------------------
	fmt.Println()
	fmt.Println("üìù EXEMPLO 3 - Fun√ß√£o Construtora com PONTEIRO:")

	// Usando a fun√ß√£o construtora NewConta()
	// Esta fun√ß√£o retorna um PONTEIRO (*Conta), n√£o uma c√≥pia
	contaNova := NewConta() // contaNova √© do tipo *Conta (ponteiro)
	fmt.Printf("Tipo da vari√°vel: %T\n", contaNova)
	fmt.Printf("Saldo inicial da conta nova: %d\n", contaNova.saldo)

	// Como contaNova j√° √© um ponteiro, podemos usar m√©todos com ponteiro
	contaNova.simular(200) // Modifica diretamente o objeto original
	fmt.Printf("Saldo ap√≥s simular: %d\n", contaNova.saldo)

	// Compara√ß√£o: criar sem fun√ß√£o construtora
	contaSemPonteiro := Conta{saldo: 100} // Cria uma struct normal
	fmt.Printf("Tipo sem ponteiro: %T\n", contaSemPonteiro)

	// Para usar m√©todos com ponteiro em struct normal, Go converte automaticamente
	contaSemPonteiro.simular(300) // Go faz: (&contaSemPonteiro).simular(300)
	fmt.Printf("Saldo da conta sem ponteiro: %d\n", contaSemPonteiro.saldo)

	// -----------------------------------------------
	// RESUMO PARA ESTUDOS
	// -----------------------------------------------
	fmt.Println()
	fmt.Println("üéØ RESUMO COMPLETO:")
	fmt.Println("‚Ä¢ M√©todo SEM *: trabalha com C√ìPIA (n√£o altera original)")
	fmt.Println("‚Ä¢ M√©todo COM *: trabalha com PONTEIRO (altera original)")
	fmt.Println("‚Ä¢ Use ponteiros quando quiser MODIFICAR a struct original")
	fmt.Println("‚Ä¢ Fun√ß√£o construtora com *: retorna ponteiro (mais eficiente)")
	fmt.Println("‚Ä¢ S√≠mbolo &: cria ponteiro para struct (&Conta{...})")
	fmt.Println("‚Ä¢ Go converte automaticamente struct para ponteiro quando necess√°rio")
}
